/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 06.10.2020 06:49:14

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 3328;
uint8_t* tensor_arena = NULL;
static uint8_t* current_location;
static uint8_t* tensor_boundary;
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,624 } };
const TfArray<1, float> quant0_scale = { 1, { 0.037920702248811722, } };
const TfArray<1, int> quant0_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 10, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int8_t tensor_data2[30] = { 88, 7, -16, 36, -20, -12, 10, 11, -16, 12, 22, -7, -5, 51, 4, 0, 19, 11, 18, 43, -26, 44, 115, 24, 23, 127, -49, 11, 36, 46, };
const TfArray<1, int> tensor_dimension2 = { 1, { 30 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0010554188629612327, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int8_t tensor_data3[10] = { -108, -11, -74, 98, 127, 122, -17, -114, -61, -103, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0001897543843369931, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { 11, -70, 74, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00026671512750908732, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[3*10] = { 
  -26, -111, -117, 100, 38, -6, 89, 50, -86, -3, 
  75, -12, 103, -95, 31, -25, -30, 48, 74, 22, 
  -127, -3, 7, 73, 100, 52, -46, -24, 26, -77, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,10 } };
const TfArray<1, float> quant5_scale = { 1, { 0.005906115286052227, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[30] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 30 } };
const TfArray<30, float> quant6_scale = { 30, { 7.8975193900987506e-05, 5.1754592277575284e-05, 7.8326207585632801e-05, 5.7553115766495466e-05, 7.3198782047256827e-05, 5.8316618378739804e-05, 6.9154746597632766e-05, 6.5837353758979589e-05, 5.8380188420414925e-05, 9.3020258645992726e-05, 5.8120524045079947e-05, 5.3392715926747769e-05, 6.1879487475380301e-05, 7.5876785558648407e-05, 6.2026861996855587e-05, 5.880184835405089e-05, 7.0061221776995808e-05, 6.6300650360062718e-05, 8.8419961684849113e-05, 6.4120446040760726e-05, 7.4336348916403949e-05, 7.1751892392057925e-05, 7.4479212344158441e-05, 5.8973117120331153e-05, 7.4349612987134606e-05, 6.3252264226321131e-05, 7.2328286478295922e-05, 7.1184484113473445e-05, 6.8527144321706146e-05, 6.5591768361628056e-05, } };
const TfArray<30, int> quant6_zero = { 30, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[30*1*7*13] = { 
  /* [0][0][][] */ -101,-91,16,89,-46,10,4,8,-74,20,53,-47,8, -65,-69,52,-57,38,12,19,-45,-32,51,39,-43,3, -71,-59,32,66,32,0,-13,-53,82,-35,7,-80,-20, -127,-11,-17,-59,-59,12,-15,-53,-79,-57,-71,45,-42, -11,54,62,-6,-11,34,19,54,63,-4,17,-9,33, -8,71,-23,69,71,12,74,-10,25,23,-30,20,30, 5,60,56,-20,106,75,65,-22,-88,-50,9,-14,-1, 
  /* [1][0][][] */ 7,62,-31,-35,62,41,70,-38,-24,-60,-97,2,73, 74,-38,30,5,-46,42,-68,76,6,-13,82,17,69, -9,-24,53,-108,-79,-116,-37,27,88,97,76,-12,94, -46,55,-8,34,-2,27,-66,-13,-35,-14,73,15,-65, 102,-29,-57,41,-96,-45,87,-65,127,39,-104,-86,-5, 88,-92,-47,-21,-105,70,-58,-79,-30,19,-69,98,35, -47,-122,59,74,-62,80,-79,-125,-83,98,-94,67,50, 
  /* [2][0][][] */ -46,110,67,118,-37,-52,-13,20,-8,55,-51,51,42, -16,47,74,-8,15,-31,-4,-80,-10,57,-100,-2,-43, 8,23,-83,70,55,77,79,35,2,-47,30,28,39, 125,45,-127,9,-13,-38,60,89,-85,-37,-10,-9,-12, 8,0,-80,71,69,33,70,-33,-9,17,20,17,74, 85,-9,72,-2,-65,78,47,-13,-2,8,36,54,11, -40,75,125,-58,15,13,-26,-12,-19,4,-32,16,-25, 
  /* [3][0][][] */ -117,26,11,36,-34,-2,61,83,-26,-52,-15,-28,124, 40,-73,5,-37,66,12,105,4,96,-101,42,24,-13, -12,-35,-33,-46,-73,-16,73,73,-91,-15,-92,56,8, -115,-102,20,78,-24,13,98,31,65,-11,14,-43,22, -86,90,-39,24,41,79,-14,-69,-14,67,72,65,-89, 8,-4,-73,-64,-72,28,33,28,62,-53,36,15,-66, -27,-56,17,10,-22,-127,-73,26,-72,-67,32,79,-39, 
  /* [4][0][][] */ 29,-110,30,45,-79,56,6,-62,-3,-29,-18,-26,-5, 2,-70,-21,18,-19,55,-31,-11,-8,28,46,59,19, -3,-40,-43,-59,-29,47,23,-13,-68,29,68,-4,-34, 71,-96,5,-48,-61,10,45,-112,23,-38,6,41,59, 31,-59,-6,-26,42,12,-54,-91,-38,90,-18,45,-29, 29,0,-58,-62,-23,-32,-31,-41,40,83,-2,-42,-42, 127,-5,-42,-22,21,-25,77,-90,13,-24,-7,-4,-54, 
  /* [5][0][][] */ 84,109,1,-11,0,-83,-78,-74,86,25,45,-1,51, 109,-49,-1,-73,-18,-15,18,23,-48,109,115,28,33, -14,118,69,-21,49,-81,-28,40,-20,-4,29,50,-82, 27,7,-86,-21,-15,49,-77,-69,71,-36,-41,-91,-78, 63,89,-3,54,106,-28,26,4,2,9,24,66,39, -34,36,-53,14,-59,-7,-76,-20,-15,45,-47,46,-33, -58,108,-33,127,56,38,3,-2,117,-14,14,8,-119, 
  /* [6][0][][] */ 37,127,-81,-9,70,-59,43,-13,-22,-55,58,78,-2, 68,72,-79,-8,61,7,90,19,-13,-10,89,53,-20, 48,85,-90,-63,22,45,58,22,39,-38,-32,4,1, 68,72,-39,-56,10,49,27,-18,-31,-29,13,-42,73, 107,103,-11,19,42,36,51,11,15,85,68,-48,10, 92,102,52,24,-28,-71,-29,-37,30,32,-13,-48,-52, -7,75,55,-62,-36,-9,76,9,-38,50,-39,32,33, 
  /* [7][0][][] */ -18,13,-21,59,2,47,-60,7,-51,6,19,35,21, 42,-69,34,0,-8,48,45,-71,14,-47,-45,-66,18, -5,-49,52,41,20,82,6,-42,36,-37,50,-21,92, 0,-14,-11,30,25,58,-50,-58,60,-32,-70,61,-94, 43,-64,127,-36,-65,45,-78,6,-97,-54,-89,84,-97, -66,9,60,-112,-64,32,-52,72,-54,-8,70,16,61, 34,43,38,21,-60,-3,-36,-10,47,-44,-73,67,-17, 
  /* [8][0][][] */ 69,-35,-102,39,-20,-52,-67,-108,11,29,-15,27,78, 29,-21,-19,-38,-52,13,-3,-60,49,48,86,58,3, 67,-56,-79,-53,12,-64,-74,-13,-34,-59,-13,-60,5, -57,-9,9,125,123,-66,67,-114,43,33,-40,79,-74, 71,-34,-4,-61,122,-30,40,-5,113,88,1,3,-12, 70,-61,-11,43,115,50,-59,-11,83,33,78,63,9, -126,37,0,-34,-31,81,-64,-33,127,104,-15,-64,-105, 
  /* [9][0][][] */ 24,61,7,-6,2,-48,18,-31,-33,-35,-46,15,36, 34,-5,39,65,80,-13,-42,-24,-25,-25,14,13,-26, 109,-26,5,43,-43,-14,-7,-62,59,-8,37,-12,-27, 64,-23,-58,-23,-18,52,44,31,30,-14,-21,1,12, 83,50,-69,5,-40,65,-50,-65,-45,19,-77,23,2, 127,-13,-48,-11,29,-20,-8,-27,35,-6,39,-24,-54, 42,64,11,-22,-38,27,6,13,-39,-48,51,22,56, 
  /* [10][0][][] */ -74,-65,-97,-20,13,-83,54,-63,20,25,-9,-30,-55, 85,11,-43,-53,-95,24,-53,52,14,16,37,-54,5, -9,108,92,-88,55,47,-33,66,-22,91,112,16,81, 7,-59,-41,-115,-102,56,-49,-47,-17,-46,5,-53,60, 53,78,127,99,-121,10,-40,72,64,51,-18,-75,99, 0,92,3,22,-39,67,-64,107,47,27,2,-89,75, 43,2,84,46,-51,-88,-37,60,-92,-84,14,53,61, 
  /* [11][0][][] */ 108,15,-35,84,29,-73,115,-75,0,-68,6,-33,64, 18,-37,-73,87,17,74,14,-82,-119,-15,67,80,61, -41,42,-85,-40,-41,-5,15,76,19,-3,127,-118,14, -60,20,-85,52,-81,38,54,52,53,-13,69,14,-52, -25,120,-59,-61,-16,-84,108,-80,16,-46,-55,43,-12, -66,-77,16,71,-82,25,59,98,-26,18,4,11,-75, 112,-27,5,26,77,-69,39,91,56,-77,49,-82,97, 
  /* [12][0][][] */ -11,-116,-43,41,-34,-60,32,-3,-34,-6,-99,-46,-93, 54,-18,55,-58,-11,17,-39,40,-48,51,65,-41,-3, 96,1,32,-31,-63,-56,21,114,-39,-47,86,34,16, 38,-96,-127,-50,-76,38,15,-82,22,3,-32,21,-14, -113,105,31,29,-54,-62,-27,74,70,-68,1,18,-49, -4,-50,60,-5,106,116,74,55,10,48,-48,-35,68, -22,-98,-66,10,-95,-71,6,-84,-43,-16,-11,43,-28, 
  /* [13][0][][] */ -68,-98,16,21,21,42,40,-57,23,13,14,38,40, -127,-58,-7,-54,-7,18,20,-64,-6,39,29,94,-31, -96,-32,47,-16,18,-84,-17,55,-67,43,10,68,49, -90,22,-9,-5,-3,-16,-112,85,-4,27,-6,-61,41, -56,75,-48,7,35,41,-27,-6,-22,-2,-31,-91,21, 10,75,-86,0,31,-45,3,-60,37,-54,1,14,-7, -70,5,-108,96,15,-76,36,-95,-33,-30,76,-54,-7, 
  /* [14][0][][] */ -10,-123,-62,21,41,-16,-43,-22,-101,-70,-43,-16,-8, 61,-4,8,7,70,-18,4,10,-46,32,-48,26,-45, 9,-88,51,-120,4,51,38,26,-46,-76,-33,19,42, 45,-93,-40,-57,29,16,-35,-77,-52,51,-19,0,45, -6,-44,-112,-81,-20,-64,39,47,-14,62,-95,-26,-103, 127,-36,-33,-127,13,-75,-32,54,36,101,11,-46,14, 89,53,-43,-93,81,36,-65,-44,57,58,1,15,-6, 
  /* [15][0][][] */ 15,8,7,25,-19,30,62,-116,-88,88,-64,7,30, -1,-36,-34,-37,58,41,9,-108,-24,94,70,4,99, 99,46,68,-35,69,37,-75,-51,46,11,14,-1,-25, 49,72,89,-21,68,-59,4,-44,-39,32,-80,72,91, -22,-66,88,-11,0,-36,25,-23,-86,-49,-63,2,-66, -22,46,-18,42,113,77,-87,32,24,68,-21,58,5, 119,-67,-9,28,127,29,0,-82,-66,37,-65,53,10, 
  /* [16][0][][] */ -127,-9,33,-2,-8,-26,31,3,-4,73,27,27,-45, -15,-81,-54,59,-23,-13,-50,-36,-47,78,-29,-41,-20, 16,-15,-64,-31,44,82,105,58,56,-34,-14,-45,-50, -12,-51,8,47,-100,-61,-32,65,28,59,3,-75,38, 16,32,116,4,-8,-53,-59,-13,-81,0,44,10,63, 30,34,-20,-55,2,43,-38,3,84,-28,66,36,-7, -44,-63,3,47,71,5,-27,-34,-43,-46,-9,2,-84, 
  /* [17][0][][] */ -7,-38,-70,69,59,84,-13,-19,20,-30,-46,-97,-51, -8,1,34,103,91,105,80,107,-78,0,-13,34,3, 59,-114,-78,-83,71,48,-16,45,48,59,68,0,-44, -45,108,81,78,-4,-60,44,-1,85,-62,26,46,22, 69,41,-65,-19,26,29,-101,50,-4,-52,33,-94,36, -95,55,48,106,-43,-61,75,-32,103,101,-48,27,-20, -127,20,24,-28,90,91,-12,8,-29,-61,72,67,53, 
  /* [18][0][][] */ 36,5,20,-29,-11,26,-16,55,54,-85,40,-20,-71, 67,-37,-23,-54,-30,-14,15,35,-5,1,36,19,-71, 89,-26,26,-57,39,-1,25,-66,-60,-51,44,-31,12, 81,20,-14,-78,43,-49,3,20,-54,-10,-31,-39,0, 94,6,40,-51,-83,31,-8,-42,-20,-48,-32,14,-4, 126,46,48,-39,-47,22,-51,33,-23,52,-17,30,16, 127,74,33,8,-37,-27,-78,40,-33,-46,-34,37,21, 
  /* [19][0][][] */ -42,-17,7,42,55,55,61,-31,-38,8,38,81,61, 36,15,35,66,-4,69,5,-118,-77,20,33,51,15, -33,-74,61,21,33,0,-20,-24,47,50,-88,-88,-46, -2,25,112,-35,113,94,51,-85,-57,28,0,43,69, -43,-41,64,9,-52,7,47,-17,-18,70,-92,-19,21, -56,43,35,72,5,-22,-60,-12,-78,-50,-127,28,92, 70,57,-34,-64,63,-8,-31,-48,54,42,-42,-70,-64, 
  /* [20][0][][] */ -105,-49,11,-55,-34,27,50,68,48,-29,50,20,-48, -102,32,-116,-97,-57,-32,-57,-93,-65,34,17,35,-28, 50,2,15,45,13,26,30,36,-24,-14,38,-4,-13, 124,-34,14,-14,-4,9,-43,35,-45,3,24,52,-32, 60,62,-15,-22,18,24,18,1,-42,31,-3,-14,37, 69,-84,-81,-44,-93,19,58,-12,-16,-37,13,14,-49, -57,-22,58,127,96,45,-48,-38,49,-8,-20,31,-17, 
  /* [21][0][][] */ -26,-44,9,80,76,89,54,89,-48,-51,-19,42,22, -10,-80,27,-40,-11,-14,35,61,-14,-58,-29,41,59, -93,-44,-1,-68,5,-20,-90,-17,-84,50,-37,24,-5, -43,0,40,-4,48,-31,21,-61,-49,-53,3,-54,30, -127,-71,-91,59,-10,87,-41,-35,-7,5,-65,-50,70, -72,-25,-54,62,36,-55,-23,11,-11,44,4,-64,-42, -106,-58,-22,80,40,54,69,-43,18,103,23,-3,28, 
  /* [22][0][][] */ -106,-13,-17,-26,-10,7,1,-40,-20,79,-56,-21,-75, -104,-61,-38,86,-28,-12,-38,98,-25,-43,-60,-36,-5, 12,0,-17,7,63,-37,-84,-37,-28,-41,50,35,33, -9,-96,30,18,36,30,52,60,-95,41,-103,-80,-1, -64,-20,-30,29,90,-55,-60,-64,-11,-71,73,82,11, -114,-84,60,-15,-30,-40,-8,-70,-76,11,6,22,44, -98,-127,68,-27,-59,19,-43,-61,9,-59,32,60,12, 
  /* [23][0][][] */ 11,-12,7,-3,20,14,-9,107,21,-24,-1,-48,46, -12,120,-48,40,33,57,-14,50,-15,-57,44,-7,68, 83,43,52,-76,86,11,44,-83,-73,-49,-45,44,110, 42,-33,50,-83,66,-75,-94,23,-84,-91,71,-59,21, 105,22,-37,-21,61,38,48,65,-59,-91,66,-15,-33, 93,-9,-22,-9,43,10,-16,-55,72,-61,11,42,-33, 66,-42,-127,-71,41,39,71,31,-67,-34,24,-57,85, 
  /* [24][0][][] */ 0,47,8,-24,-11,2,28,-8,8,39,-18,-77,25, -11,-60,12,-51,-63,51,1,-26,52,0,-55,15,-37, 6,-75,-5,-16,61,-68,-1,-44,30,42,1,-2,47, 26,-33,5,87,25,-22,-65,-26,-13,19,-36,41,-2, 45,-34,39,31,25,-11,-37,-48,47,62,57,10,42, -10,-114,-29,66,-49,-48,-51,37,-72,-64,5,42,35, -57,-127,-2,-30,57,-45,-75,-73,-59,-35,24,27,-76, 
  /* [25][0][][] */ -68,-27,-8,82,86,35,-44,68,-68,50,-84,73,78, -12,-29,-42,36,89,60,-21,95,-79,-54,-71,37,-25, -64,-42,79,-18,-42,78,1,15,9,91,57,-34,27, -127,15,-32,16,70,22,-91,-77,-43,-98,-50,-2,-41, -23,34,55,-72,115,-38,-87,91,30,-14,-97,-10,78, -50,-13,-74,22,56,40,17,-15,85,49,81,-21,-22, 19,-68,-42,48,45,7,-47,-91,-60,-24,-63,-38,-26, 
  /* [26][0][][] */ 74,65,1,42,2,-22,-74,-44,-27,-15,-30,34,-60, 0,76,14,7,-9,41,51,7,17,-16,-13,46,-33, 98,84,-116,39,33,1,36,38,37,-22,-4,-66,7, 32,3,-48,-4,9,-57,90,-36,-59,65,22,10,34, 76,34,-2,-60,-59,-37,93,-26,-33,90,-87,12,-95, 127,8,97,-43,-21,56,-5,-3,52,-7,-76,89,-100, 62,63,52,-105,-57,52,-39,20,-32,24,-25,91,-65, 
  /* [27][0][][] */ 127,-61,-91,-72,-68,-48,12,-6,-55,-8,3,-37,-10, -12,-86,-120,-66,-40,21,31,15,-31,-22,-43,11,-58, 64,83,-74,107,34,47,-32,-41,22,85,43,-4,-44, -16,59,40,-83,-36,-24,-7,-44,57,18,46,-2,-57, 104,63,-19,-77,36,62,-106,-89,-80,-73,-18,-45,-44, 77,-22,88,37,3,0,24,-49,47,57,5,41,35, 3,50,86,45,-40,-60,-66,15,18,62,29,53,31, 
  /* [28][0][][] */ 99,61,38,29,-42,-41,-82,-94,-47,-35,28,-40,-12, 127,-19,102,61,42,55,-51,-2,74,61,58,-9,-7, 98,-96,45,101,41,9,39,30,42,-63,0,13,11, 70,74,78,81,32,4,-60,19,-28,101,62,0,-76, 37,-30,49,-82,-9,8,31,55,11,20,-3,79,-82, 27,77,-68,-104,-74,22,-11,71,-5,-66,44,-71,87, 90,106,24,-42,89,-25,-20,-57,-51,-63,10,-67,75, 
  /* [29][0][][] */ -15,47,-57,13,-49,64,52,73,-28,39,8,-119,-41, -81,-42,-80,-60,-32,31,-77,-19,109,-24,51,50,49, -127,-35,63,-59,36,51,60,16,-77,-32,-58,57,34, -104,-64,66,107,62,-83,-11,-24,-54,-20,-71,53,35, -119,-40,-36,36,32,27,21,6,61,6,-84,94,-89, 40,8,24,-37,12,-43,24,41,-39,-9,94,7,-30, -97,48,-33,47,59,122,-15,71,93,51,-76,27,-50, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 30,1,7,13 } };
const TfArray<30, float> quant7_scale = { 30, { 0.0020826405379921198, 0.0013648109743371606, 0.0020655263215303421, 0.0015177228488028049, 0.0019303119042888284, 0.0015378569951280951, 0.0018236673204228282, 0.0017361849313601851, 0.001539533375762403, 0.002453020540997386, 0.0015326858265325427, 0.0014080096734687686, 0.0016318127745762467, 0.0020009330473840237, 0.0016356991836801171, 0.0015506529016420245, 0.0018475718097761273, 0.0017484024865552783, 0.0023317069280892611, 0.0016909086843952537, 0.0019603103864938021, 0.0018921562004834414, 0.0019640778191387653, 0.0015551694668829441, 0.0019606603309512138, 0.0016680140979588032, 0.0019073561998084188, 0.0018771932227537036, 0.0018071169033646584, 0.0017297086305916309, } };
const TfArray<30, int> quant7_zero = { 30, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 10 } };
const TfArray<10, float> quant8_scale = { 10, { 3.976259904447943e-05, 4.368745067040436e-05, 3.9481663407059386e-05, 4.8744237574283034e-05, 6.9889851147308946e-05, 5.6294451496796682e-05, 6.2451355915982276e-05, 4.4688757043331861e-05, 3.6101206205785275e-05, 4.1173345380229875e-05, } };
const TfArray<10, int> quant8_zero = { 10, { 0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[10*1*7*30] = { 
  /* [0][0][][] */ -115,-13,-8,-7,56,-70,-51,-3,-110,-115,-49,-94,70,44,-52,-20,-121,-15,-45,-22,57,-88,-126,-61,-70,-118,81,-56,-105,-77, -96,2,59,-35,95,70,86,12,65,23,-8,79,-44,49,-60,58,54,14,-72,-88,-62,-31,40,-57,-9,-110,39,24,94,-86, 90,-26,-41,-89,-100,-56,-96,124,-29,84,94,-22,101,-84,-15,84,22,37,-27,21,-44,-55,13,96,-79,114,11,28,88,48, 68,65,92,-7,-42,-15,-1,-105,-27,-96,-91,-40,-50,18,-11,29,116,118,-47,-74,-31,28,20,-76,-62,-68,41,-70,22,127, 62,50,72,-23,-1,-91,-35,74,45,97,26,-58,75,63,26,87,79,63,72,-65,104,44,-65,-93,52,83,59,33,-64,81, 96,-75,23,108,-92,70,26,-31,29,-80,63,25,16,-96,1,-107,23,43,-29,71,80,80,23,8,114,14,50,8,-62,8, -37,-57,64,26,30,40,-77,21,-69,7,-71,-50,55,46,-26,94,-30,119,-53,-59,116,104,-14,103,-91,-12,-52,93,58,77, 
  /* [1][0][][] */ -56,-14,-74,48,61,2,78,-42,-36,-26,-5,-60,-4,-53,-31,-85,-47,55,101,-95,61,53,1,117,-19,96,-41,71,22,30, -93,17,26,58,56,45,62,-43,-2,84,-105,26,56,-66,121,87,-24,90,51,-1,87,-22,-8,66,56,61,-4,58,32,-60, 79,-13,-50,-53,-23,80,123,-77,-24,39,-56,78,-102,-29,124,64,1,-73,32,86,50,-57,45,14,-32,39,25,-26,-35,-109, -13,60,-77,37,-58,101,4,-54,93,-18,36,-43,-93,7,20,31,16,-38,-98,-3,64,-28,62,70,-7,68,-28,-82,-51,59, -59,-79,20,83,52,33,-28,-80,58,15,41,41,31,49,-25,37,-64,-24,3,38,-37,-75,-88,-64,47,70,59,-59,-96,-63, 35,22,-54,63,32,-61,36,65,21,-32,48,-52,66,-104,-4,-44,63,-34,18,-85,80,32,16,-58,-19,16,35,-14,-31,36, -112,-29,-97,-98,42,24,-83,-73,-59,19,-76,66,-21,-47,43,-82,-4,-79,-22,0,-3,-34,-127,-7,37,-66,25,-65,76,-99, 
  /* [2][0][][] */ -74,76,28,-24,47,44,38,-41,104,85,-73,-44,45,-121,43,-45,-15,108,-110,-38,125,-77,-19,37,71,27,-52,-56,14,100, 68,-95,4,0,-64,101,67,74,-20,-43,63,64,32,56,46,-87,23,-89,-31,-34,-27,-1,25,-57,83,7,-56,-96,-16,-42, -59,-105,-1,104,81,92,-39,-88,72,73,80,-61,59,-85,48,30,108,15,52,17,105,104,14,52,52,6,-105,52,7,90, 31,32,-81,-108,117,-66,36,-84,125,-88,2,86,116,-72,121,57,-80,11,-69,83,102,-83,15,-55,102,-89,-9,34,40,13, 7,43,-17,-1,-18,-1,-65,79,65,39,-60,34,44,-121,124,10,36,124,100,54,-65,-94,49,79,97,-113,-91,-56,84,-64, 36,72,9,-45,-23,-37,-5,47,4,-3,-3,8,50,7,-76,44,-37,-74,-51,74,125,-57,-67,-1,-83,-8,-102,107,-97,-31, 79,70,87,63,-12,127,-81,98,-86,-19,67,-12,95,-41,-108,37,-58,103,88,53,79,-51,44,-64,37,-29,-124,27,-20,43, 
  /* [3][0][][] */ -78,-4,-71,-74,-6,35,72,76,75,-42,94,49,-22,-54,-41,42,20,27,47,-73,-53,54,76,61,-5,-82,-64,71,48,21, 51,-11,-57,-1,7,-76,47,55,8,-92,-54,-29,-67,88,37,-84,-27,-11,-6,82,-51,-29,-13,-4,29,22,-14,-122,18,11, -5,-51,-6,-2,-43,42,-107,76,-47,-6,-64,40,-23,19,12,81,13,-66,-88,-4,30,13,43,-66,41,102,-28,-16,-127,15, -70,47,-33,9,84,-97,-70,72,-53,-83,-81,-22,-56,98,40,21,57,25,21,30,-47,68,82,-10,35,9,36,-75,-120,61, 86,73,-39,65,-15,-65,-22,-68,-43,-51,-24,-75,28,109,44,70,67,-85,-48,79,-35,8,97,77,6,37,52,-75,21,47, -102,-87,112,42,30,34,89,36,54,85,-84,-35,-42,11,73,54,-88,28,116,16,-75,-70,-122,61,7,-59,50,51,-23,-19, -45,75,28,-59,60,-14,32,23,15,-46,55,39,-69,-75,-56,66,-71,-27,75,-61,40,63,-20,-71,-38,-25,43,-25,-46,-94, 
  /* [4][0][][] */ 4,-18,-49,-50,-92,15,-54,-17,-68,17,-26,-59,-71,29,-31,-15,0,-49,2,0,-4,52,33,50,27,-21,-43,-75,-17,9, 56,-51,-29,31,-29,8,6,-11,41,16,31,29,-36,80,35,-65,-20,-23,-45,43,43,76,51,4,44,-11,-49,-43,6,-6, 20,68,-108,40,33,-5,14,60,-58,-1,34,22,-9,-46,68,31,38,-12,34,-17,-5,0,94,33,13,56,-6,-7,-2,37, -45,14,-66,-61,63,16,-20,35,-28,43,-30,10,-51,-14,74,-2,-71,-75,87,32,28,-99,-76,0,-38,-84,99,61,72,-6, -95,28,-31,-37,47,47,77,-13,19,83,-12,-7,-49,-113,16,30,-42,-6,75,-67,-68,-87,-94,-15,57,-39,23,49,26,-127, -48,-26,13,-81,1,93,89,27,80,19,-29,36,-67,-50,-15,-6,-48,35,48,49,-50,-15,31,7,-3,81,-43,55,10,23, 64,22,-25,65,-17,-26,-4,-10,20,-58,-27,20,52,-1,-41,8,-24,31,-25,-20,8,63,62,28,54,50,-93,-96,-47,57, 
  /* [5][0][][] */ 56,39,-71,28,-61,-39,-33,-15,37,-97,-87,75,-51,70,-24,54,-60,-18,-90,55,32,59,22,13,-48,34,-93,-95,-109,-10, 84,51,6,7,-17,19,18,37,49,-64,32,23,15,87,1,26,24,51,-30,19,-58,44,3,49,66,76,-70,-73,-60,19, 57,27,-75,-30,24,15,-9,-16,35,109,-21,21,-4,83,-27,19,6,44,35,-56,12,0,13,-29,-23,-57,-29,0,20,16, -101,44,-49,-44,58,14,94,45,2,119,62,-5,-43,-127,33,-17,-99,-112,61,-9,-39,-60,8,59,-39,-39,14,-25,59,-82, -71,23,-33,-114,44,58,51,36,16,-18,105,49,-60,-101,64,31,-92,6,88,-31,-11,-17,-7,78,17,-52,101,87,79,-107, -10,90,-3,33,11,-16,-9,-32,-14,19,45,-31,-62,28,-34,-8,25,73,-64,68,-59,46,16,-77,65,100,-20,42,-15,-1, 76,-41,-21,-16,-23,-31,-35,43,-70,-98,8,-9,-24,57,-48,-99,72,73,-13,46,-81,42,62,-35,48,-10,-36,-70,-13,56, 
  /* [6][0][][] */ 64,-44,64,-3,16,-22,27,32,35,71,-59,26,-106,14,-21,19,6,-11,2,-21,34,8,-77,56,-86,45,41,-53,65,31, -85,-23,88,48,-54,-59,21,47,28,-47,10,-32,54,17,-46,44,56,42,10,42,-12,-46,-108,-18,-46,42,62,-32,-14,20, -60,6,62,61,-81,24,84,0,-82,44,37,53,75,51,-25,-40,31,8,54,-67,7,71,26,-80,-57,-63,82,-6,87,32, 1,30,108,32,9,0,-30,-51,-32,-6,-5,-28,40,-38,8,-92,75,-37,29,-101,-20,-90,-35,75,-87,-127,32,-9,-14,-10, -41,-8,-101,12,-68,-24,-36,-41,-54,-66,5,15,-22,20,-70,-75,49,-95,57,-55,62,58,-12,18,78,-52,-43,-40,-16,-50, 57,53,-34,54,17,-20,38,-32,5,-75,-17,-25,49,3,29,-41,50,23,-31,-46,-34,58,43,51,71,40,-11,40,-57,16, -33,2,-85,-12,-44,47,-80,5,51,-53,54,-61,36,38,40,18,-16,-48,-21,91,54,56,82,-5,46,67,22,55,-63,-10, 
  /* [7][0][][] */ 8,70,-51,-75,-31,-20,-54,-61,104,24,51,92,-13,30,-6,-7,-29,50,-86,63,72,89,113,-93,-69,74,9,28,-81,109, 55,57,93,-22,-102,-43,-48,30,9,61,7,-19,-55,48,-88,81,-13,19,-7,45,35,-16,-3,85,84,61,59,17,4,5, 74,34,33,22,15,-2,-18,-9,23,-16,-2,-32,-3,68,20,82,35,28,-108,30,98,59,44,-31,22,98,-52,110,64,-11, -85,111,125,-91,29,-40,-62,-86,-51,101,-8,88,-7,-81,7,27,82,73,7,25,119,24,-41,18,-33,-35,110,73,-52,-53, -67,21,0,-73,-41,-93,-71,-9,-61,62,-25,-61,28,-21,70,35,-70,52,-95,-17,45,66,-21,-10,-110,-53,64,1,-95,33, -44,-2,18,-86,84,-86,-41,42,40,-23,12,-38,-1,-64,-77,-25,-18,-54,-30,-14,-64,-65,-63,49,-35,-48,52,-27,12,-66, -4,34,60,67,-54,-72,35,17,-33,84,-31,-16,92,-79,55,-49,-10,-98,-24,43,67,-83,-127,-46,-88,29,77,23,24,-50, 
  /* [8][0][][] */ -73,65,9,49,96,-15,60,-103,-36,-83,38,75,97,102,-20,47,-85,100,-7,-1,-102,34,42,-6,70,-28,-2,81,82,-17, 95,-84,-22,29,61,-15,8,-43,-23,-96,-96,106,10,-89,2,-75,-21,-45,17,-73,19,102,2,-109,-6,43,-25,39,27,7, -59,-116,-26,76,-51,-18,-1,-18,38,-95,-97,-67,-22,-94,-101,-95,10,-20,-52,25,-79,-66,16,62,-92,12,-85,-19,15,42, -28,95,-69,71,40,-40,-82,84,-55,-45,-76,-45,-35,62,-20,63,-47,32,-63,-85,-31,18,-54,80,-39,-123,74,-79,-79,36, -94,95,-67,-74,-72,-44,-29,-12,63,45,22,-82,2,-90,60,55,-110,-70,-30,-1,41,-50,15,31,84,81,30,57,-72,39, -52,-111,-86,-51,-47,-29,-62,18,-79,-78,-68,65,-4,54,-113,86,-31,55,40,-127,82,5,-96,-58,19,-67,-123,-98,-61,-87, 73,-104,69,84,24,-19,101,-16,0,82,-71,8,-82,33,-45,-118,34,34,80,19,96,1,-66,53,17,104,70,51,-84,71, 
  /* [9][0][][] */ -41,21,48,76,-91,39,56,-59,44,-37,-21,11,-86,-54,-55,6,80,85,-41,84,43,-2,-90,98,-67,-11,-36,-89,3,-92, 20,-87,61,71,18,-38,36,22,-72,8,76,-19,80,32,69,17,-25,-9,-32,99,72,-49,16,-22,-7,-56,37,5,-4,-48, -79,30,-59,108,-35,8,-64,-79,-1,-80,-40,-24,53,-30,53,-104,97,-79,-127,-47,22,67,-60,34,15,31,-94,-77,79,-102, 48,2,28,-32,-21,-34,75,-44,5,-31,35,-16,-53,44,-107,65,72,-105,74,84,122,50,-21,85,38,-33,92,28,55,-8, -93,-69,44,-69,80,-107,-90,83,5,-60,-91,-41,-10,-54,-8,16,-43,-6,-99,61,43,-52,-28,-7,66,-28,-1,52,-103,80, -23,-57,27,16,44,72,8,-93,-113,-22,91,72,82,-73,-91,-6,38,66,36,-56,113,-46,37,-46,-44,41,-48,18,-59,-18, -39,-48,-26,86,33,101,25,52,81,56,-4,-4,-102,80,26,31,-17,6,17,77,38,-81,-40,-41,-77,65,-86,109,-124,30, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 10,1,7,30 } };
const TfArray<10, float> quant9_scale = { 10, { 0.0014143080916255713, 0.0015539104351773858, 0.0014043155824765563, 0.0017337743192911148, 0.0024858985561877489, 0.0020023263059556484, 0.0022213200572878122, 0.0015895256074145436, 0.0012840767158195376, 0.0014644867042079568, } };
const TfArray<10, int> quant9_zero = { 10, { 0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 48, 13, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[3] = { 1, 48, 30, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 48, 1, 30, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 1, 7, 30, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[3] = { 1, 7, 10, };
const TfArray<1, int> tensor_dimension14 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 7, 1, 10, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,48,13 } };
const TfArray<1, float> quant16_scale = { 1, { 0.037920702248811722, } };
const TfArray<1, int> quant16_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,48,30 } };
const TfArray<1, float> quant17_scale = { 1, { 0.049819100648164749, } };
const TfArray<1, int> quant17_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,48,30 } };
const TfArray<1, float> quant18_scale = { 1, { 0.049819100648164749, } };
const TfArray<1, int> quant18_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,48,30 } };
const TfArray<1, float> quant19_scale = { 1, { 0.028114523738622665, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,48,1,30 } };
const TfArray<1, float> quant20_scale = { 1, { 0.028114523738622665, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,7,1,30 } };
const TfArray<1, float> quant21_scale = { 1, { 0.028114523738622665, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,7,30 } };
const TfArray<1, float> quant22_scale = { 1, { 0.028114523738622665, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,7,10 } };
const TfArray<1, float> quant23_scale = { 1, { 0.085154816508293152, } };
const TfArray<1, int> quant23_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,7,10 } };
const TfArray<1, float> quant24_scale = { 1, { 0.085154816508293152, } };
const TfArray<1, int> quant24_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,7,10 } };
const TfArray<1, float> quant25_scale = { 1, { 0.045159146189689636, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,7,1,10 } };
const TfArray<1, float> quant26_scale = { 1, { 0.045159146189689636, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,1,1,10 } };
const TfArray<1, float> quant27_scale = { 1, { 0.045159146189689636, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,10 } };
const TfArray<1, float> quant28_scale = { 1, { 0.045159146189689636, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,3 } };
const TfArray<1, float> quant29_scale = { 1, { 0.054232750087976456, } };
const TfArray<1, int> quant29_zero = { 1, { -54 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,3 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,6 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 18,2 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,7, 1,7, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 22,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 24,3 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,7, 1,7, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,5,4 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 624, (TfLiteIntArray*)&tensor_dimension0, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 2730, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 2100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1440, (TfLiteIntArray*)&tensor_dimension17, 1440, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 1440, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1440, (TfLiteIntArray*)&tensor_dimension19, 1440, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 1440, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1440, (TfLiteIntArray*)&tensor_dimension21, 210, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 210, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension23, 70, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 70, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 80, (TfLiteIntArray*)&tensor_dimension25, 70, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 70, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 80, (TfLiteIntArray*)&tensor_dimension27, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension29, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %u\n", bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  current_location = tensor_arena + kTensorArenaSize;
  tensor_boundary = tensor_arena;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
      uint8_t* end = start + tensorData[i].bytes;

     tflTensors[i].data.data =  start;

     if (end > tensor_boundary) {
       tensor_boundary = end;
     }
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
  free_fnc(tensor_arena);
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
