/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 08.10.2020 13:53:03

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 1568;
uint8_t* tensor_arena = NULL;
static uint8_t* current_location;
static uint8_t* tensor_boundary;
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,624 } };
const TfArray<1, float> quant0_scale = { 1, { 0.039795827120542526, } };
const TfArray<1, int> quant0_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 192, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int8_t tensor_data2[8] = { -66, -86, 6, -127, -79, -77, -53, 49, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<1, float> quant2_scale = { 1, { 0.010437101125717163, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int8_t tensor_data3[16] = { -37, -71, -44, -67, 98, -90, -37, -51, 127, 1, 1, -93, -66, -48, 51, -55, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0055282372049987316, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { -8250, 6792, -603, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<1, float> quant4_scale = { 1, { 7.707800978096202e-05, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[3*192] = { 
  20, 44, -20, 67, 59, 12, 27, 105, 32, 8, 21, 34, -45, 14, -5, 17, -82, 70, -25, 32, 35, -6, -87, 72, -18, -72, 49, 42, -30, 12, -53, -3, -39, 50, 8, 57, 9, 5, -98, 83, -17, 11, 32, 33, -96, 18, 8, 64, -40, 59, -32, 97, -9, -31, -54, 57, -6, -33, -19, -28, -78, -15, 3, 27, -57, 76, -33, 81, 22, -13, -41, 32, -9, -79, 38, 2, 1, 9, -29, -3, -2, 65, -23, 33, 57, -29, -67, 35, 18, -87, -13, 37, 9, 29, 9, 14, -44, 61, 4, 62, -15, -30, -59, 92, 35, -36, 2, 47, 12, 22, -18, 50, -70, 42, -64, 61, 26, -51, -73, 86, 2, -80, 25, -3, -37, 2, -16, 14, 1, 54, -23, 54, 23, -14, -60, 43, 0, -33, 63, 33, -18, -33, -17, 38, -86, 57, -42, 83, 22, -13, -69, 37, 1, -91, 54, 54, -51, 23, -39, 3, -38, 52, -40, 27, -19, 16, -66, 29, 21, -33, 58, 115, -10, -4, -29, 11, 10, 82, -68, 78, 53, 5, -31, 40, -22, 1, 9, -2, -50, 41, 46, 66, 
  16, -17, 28, -5, -48, -82, 4, -32, -63, 33, 30, -24, 30, -27, 22, 22, 4, 22, 34, -3, -34, -28, 4, 7, -44, 57, -29, -11, 37, -6, 21, 29, 15, -64, 33, -53, -58, -14, -11, -21, -56, -10, 58, 21, 22, -94, -86, 60, 37, -71, 38, -68, -41, -85, 6, -51, -48, 9, -9, -23, 29, -83, -31, 26, 67, -28, 34, -68, -32, -51, 6, -36, -37, 11, 5, 8, 32, -86, -36, 46, -4, -56, 45, -38, -24, -98, 0, 10, -12, 16, 0, -6, 36, -127, -66, 47, 42, -44, 48, -40, 0, -26, 4, -37, -9, 9, -58, -7, 53, -59, -56, 36, 21, -43, 23, -34, -36, -32, 2, -30, -49, 24, -14, 55, 47, -44, -13, 5, 16, -74, 36, -54, -19, -3, -18, -7, -29, 18, 3, 35, 41, -8, -61, 7, -5, -30, 33, -33, -21, -1, 22, 18, 8, 39, -76, 54, 36, -80, -43, 25, -19, -38, 38, -55, -51, -64, 39, -41, -48, 17, -27, 29, 37, -29, 18, 17, 46, -102, 12, -51, -81, -55, -11, -65, -76, 19, -26, 20, 34, -72, 3, -10, 
  -52, -68, -4, -38, 44, 98, -28, -55, 49, -62, -89, -6, 12, 34, -28, -55, -32, -1, -2, -31, 47, 39, 29, -87, 16, 12, -61, -7, 10, 11, 19, -21, -5, 58, 27, -18, 45, 54, 54, -53, 43, -13, -73, -32, -10, 29, 50, -65, -47, -38, -29, -1, -8, 72, 49, -1, 24, 48, 13, -34, 8, 50, 31, -33, -15, 31, -7, -6, 47, 90, 24, 7, 7, 22, -6, -46, -5, 25, 0, -18, 11, 13, -11, -20, 9, 88, 51, 5, 12, 19, 37, -11, -6, 85, 89, -63, -34, 22, -9, 6, 26, 60, 60, -5, 15, 27, -6, -7, -11, 71, 45, -13, -48, 5, -33, -8, 45, 83, 57, -8, -7, 54, -23, -29, -9, 46, 39, -34, -23, -5, -35, 8, 2, 48, 11, 22, 51, 6, 17, -68, 18, 16, 26, -13, -3, -22, -31, -20, 6, 10, 57, 5, 61, 39, 5, -48, -11, 43, 40, 21, -4, 26, 14, 5, -3, 54, 53, -17, 48, 9, -13, -96, 37, 21, 74, -34, -51, -64, 9, -26, 54, 58, -2, 2, 63, -9, -8, -36, 12, -17, -72, -48, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,192 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0048450306057929993, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[8] = { 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 8 } };
const TfArray<8, float> quant6_scale = { 8, { 0.00034088708343915641, 0.00012926234921906143, 0.00023505254648625851, 0.00016375893028452992, 0.00014744806685484946, 0.00015799066750332713, 0.00029480052762664855, 0.00016657118976581842, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[8*1*3*13] = { 
  /* [0][0][][] */ 52,43,31,20,34,13,6,12,1,-4,-9,-3,-11, 33,-65,-57,-32,-19,-4,0,-24,18,10,-5,10,-5, -127,35,21,2,-10,-12,-16,-1,6,-8,-8,-4,6, 
  /* [1][0][][] */ 110,42,-15,-85,6,-62,51,-92,15,19,-33,-11,-31, 46,127,-10,0,81,-59,18,-60,19,31,-102,49,27, 83,113,-71,27,32,-10,-1,-37,-18,41,22,78,-9, 
  /* [2][0][][] */ -76,-38,-2,-11,-9,-6,31,-8,-51,-34,-32,-28,62, -83,-38,2,-6,34,-4,5,4,7,-19,21,19,13, -127,-69,12,-11,2,-10,14,-60,-3,-15,-5,16,67, 
  /* [3][0][][] */ -47,112,10,71,1,-18,-22,72,10,-11,-37,-15,48, 21,81,-127,39,38,-72,11,39,-42,-15,18,-39,46, 40,-69,-16,71,18,47,24,-41,0,23,-10,21,7, 
  /* [4][0][][] */ 127,37,-40,-94,-41,25,21,-29,-3,-43,-28,-20,-24, 80,50,53,-76,-63,62,-9,25,20,-71,39,4,-83, 67,89,55,-66,-99,66,-60,-8,-7,-70,36,-29,-21, 
  /* [5][0][][] */ 72,-118,31,-33,-112,-13,4,9,2,-12,33,-25,-8, 48,-80,19,79,31,17,-6,-12,-22,18,26,-23,1, 127,-69,-4,108,127,-30,-25,33,1,8,-38,-14,19, 
  /* [6][0][][] */ 26,41,-47,-79,-65,-1,2,29,-13,4,-5,-12,7, -27,10,28,75,34,-6,22,-21,31,-16,-18,-12,12, -127,15,14,-6,-20,-18,1,49,-7,-21,20,-1,-2, 
  /* [7][0][][] */ -127,48,50,27,60,63,-43,-26,-7,-16,-17,54,-17, -115,15,-42,-35,77,25,11,11,0,27,-46,-44,13, -52,-85,21,102,53,-56,30,15,-9,-58,3,11,28, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0085658999159932137, 0.003248138353228569, 0.0059064622037112713, 0.0041149775497615337, 0.003705113660544157, 0.0039700311608612537, 0.0074078254401683807, 0.004185644444078207, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00015556911239400506, 0.00018141888722311705, 0.00012198567856103182, 0.00018637269386090338, 0.00029748305678367615, 0.00029078603256493807, 0.00022340222494676709, 0.00023102630802895874, 0.0002759010239969939, 0.00011826919217128307, 0.00011833783355541527, 0.00018895516404882073, 0.00013116096670273691, 0.00025674927746877074, 0.00025569982244633138, 0.00015529603115282953, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ -15,-41,-10,-53,-41,-55,90,-17, 127,-18,-37,11,-10,-3,-27,-69, 59,-11,-42,28,6,99,54,-19, 
  /* [1][0][][] */ -46,19,-127,51,-64,-12,10,0, -34,2,-90,63,-41,-23,-3,-6, -8,-15,-82,23,89,7,-29,-48, 
  /* [2][0][][] */ 0,-69,-23,14,-59,127,-55,2, 115,-40,-70,6,-24,-45,-65,-3, 70,-19,-24,-65,-32,-23,94,-3, 
  /* [3][0][][] */ -52,32,-43,22,-47,-11,13,-13, -47,-11,-56,127,61,-3,-9,-23, -19,-34,-63,-92,5,-15,20,-29, 
  /* [4][0][][] */ -14,-51,-5,-45,-85,-89,-12,11, -31,-45,6,-22,-127,-64,-10,-4, -5,-31,23,-40,-88,-47,-10,6, 
  /* [5][0][][] */ -25,12,-40,19,56,7,-47,-61, -51,0,-81,-8,-8,-11,-52,-120, -51,36,-127,-9,5,14,-23,-73, 
  /* [6][0][][] */ -59,-31,8,-23,17,69,-127,-28, -46,-41,17,-14,-12,27,-92,-91, -44,53,-40,-8,16,20,-99,-81, 
  /* [7][0][][] */ -21,-25,-38,90,-12,1,37,-63, -13,-48,-103,49,47,-39,27,-66, -9,-72,-14,16,1,-127,23,-19, 
  /* [8][0][][] */ -33,-77,10,-22,-109,-34,-4,-1, -21,-78,-15,-25,-108,-89,9,1, 2,-127,9,-93,-114,-103,7,-8, 
  /* [9][0][][] */ -59,-40,23,-127,29,61,-35,-99, -6,118,-16,-105,-35,98,11,-111, -71,-15,-23,-42,-31,50,-22,-71, 
  /* [10][0][][] */ -62,-109,-121,-66,-33,-96,24,-117, 17,-53,-29,-19,127,-49,42,-57, 18,-50,-30,-28,-61,-78,47,-38, 
  /* [11][0][][] */ 29,-16,18,64,-107,-61,47,56, -62,-9,-31,16,-29,-8,-31,-2, -28,34,-127,74,35,-21,-78,-49, 
  /* [12][0][][] */ 69,-28,12,-5,-54,93,94,21, -53,-56,-23,6,-35,-69,98,-1, 11,-3,-19,-22,-19,127,37,-13, 
  /* [13][0][][] */ -29,16,-57,10,-16,7,-63,-115, -26,-2,-66,31,38,-13,-32,-89, -16,23,-127,52,10,-9,-16,-58, 
  /* [14][0][][] */ -51,18,-66,6,-7,6,-65,-127, -16,-12,-84,28,-10,-21,-54,-76, -11,45,-81,-19,-41,20,-33,-41, 
  /* [15][0][][] */ -6,-6,-93,127,5,26,-123,-32, 41,5,-53,-27,20,5,78,-68, 87,-80,53,-55,-14,-26,48,5, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.004603139590471983, 0.0053680092096328735, 0.003609438193961978, 0.0055145877413451672, 0.0088022360578179359, 0.008604077622294426, 0.0066102556884288788, 0.0068358448334038258, 0.0081636440008878708, 0.0034994708839803934, 0.0035015018656849861, 0.0055910004302859306, 0.0038809261750429869, 0.0075969621539115906, 0.0075659099966287613, 0.0045950594358146191, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 48, 13, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[3] = { 1, 48, 8, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 48, 1, 8, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 1, 24, 8, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[3] = { 1, 24, 16, };
const TfArray<1, int> tensor_dimension14 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 24, 1, 16, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,48,13 } };
const TfArray<1, float> quant16_scale = { 1, { 0.039795827120542526, } };
const TfArray<1, int> quant16_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,48,8 } };
const TfArray<1, float> quant17_scale = { 1, { 0.070585779845714569, } };
const TfArray<1, int> quant17_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,48,8 } };
const TfArray<1, float> quant18_scale = { 1, { 0.070585779845714569, } };
const TfArray<1, int> quant18_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,48,8 } };
const TfArray<1, float> quant19_scale = { 1, { 0.033796306699514389, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,48,1,8 } };
const TfArray<1, float> quant20_scale = { 1, { 0.033796306699514389, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,24,1,8 } };
const TfArray<1, float> quant21_scale = { 1, { 0.033796306699514389, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,24,8 } };
const TfArray<1, float> quant22_scale = { 1, { 0.033796306699514389, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,24,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.10620412230491638, } };
const TfArray<1, int> quant23_zero = { 1, { 87 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,24,16 } };
const TfArray<1, float> quant24_scale = { 1, { 0.10620412230491638, } };
const TfArray<1, int> quant24_zero = { 1, { 87 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,24,16 } };
const TfArray<1, float> quant25_scale = { 1, { 0.015908673405647278, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,24,1,16 } };
const TfArray<1, float> quant26_scale = { 1, { 0.015908673405647278, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,12,1,16 } };
const TfArray<1, float> quant27_scale = { 1, { 0.015908673405647278, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,192 } };
const TfArray<1, float> quant28_scale = { 1, { 0.015908673405647278, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,3 } };
const TfArray<1, float> quant29_scale = { 1, { 0.05283210426568985, } };
const TfArray<1, int> quant29_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,3 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,6 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 18,2 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 22,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 24,3 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,5,4 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 624, (TfLiteIntArray*)&tensor_dimension0, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 624, (TfLiteIntArray*)&tensor_dimension17, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension23, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension27, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension29, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %u\n", bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  current_location = tensor_arena + kTensorArenaSize;
  tensor_boundary = tensor_arena;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
      uint8_t* end = start + tensorData[i].bytes;

     tflTensors[i].data.data =  start;

     if (end > tensor_boundary) {
       tensor_boundary = end;
     }
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
  free_fnc(tensor_arena);
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
